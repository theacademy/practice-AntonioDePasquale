# Generated by Django 5.1.1 on 2024-10-04 15:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Crush',
            fields=[
                ('crushId', models.AutoField(primary_key=True, serialize=False)),
                ('crushName', models.CharField(max_length=100)),
                ('mood', models.CharField(max_length=100)),
                ('matchingMoodEntries', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Diary',
            fields=[
                ('diaryId', models.AutoField(primary_key=True, serialize=False)),
                ('author', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('entryId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('mood', models.CharField(choices=[('Musical', 'Musical'), ('Sporty', 'Sporty'), ('Artistic', 'Artistic'), ('Fashion', 'Fashion'), ('Nerdy', 'Nerdy')], max_length=100)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('diaryId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='diaryapp.diary')),
            ],
        ),
        migrations.CreateModel(
            name='Locker',
            fields=[
                ('lockerId', models.AutoField(primary_key=True, serialize=False)),
                ('diaryId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lockers', to='diaryapp.diary')),
            ],
        ),
        migrations.CreateModel(
            name='Memo',
            fields=[
                ('memoId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('content', models.TextField()),
                ('locker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to='diaryapp.locker')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerCharacter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inGameName', models.CharField(max_length=30)),
                ('eyeColour', models.CharField(max_length=10)),
                ('hairColour', models.CharField(max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='diary',
            name='playerCharacterId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diaries', to='diaryapp.playercharacter'),
        ),
    ]
